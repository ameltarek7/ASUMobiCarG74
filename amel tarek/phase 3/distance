
int motorA1 = 11;
int motorA2 = 13;
int motorB1 = 4;
int motorB2 = 5;
int motorC1 = 6;
int motorC2 = 7;
int motorD1 = 8;
int motorD2 = 9; 

// Constants for Interrupt Pins
// Change values if not using Arduino Uno

const byte MOTOR_A = 3;  // Motor 2 Interrupt Pin - INT 1 - Right Motor


// Constant for steps in disk
const float stepcount = 20.00;  // 20 Slots in disk, change if different

// Constant for wheel diameter
const float wheeldiameter = 6; // Wheel diameter in millimeters, change if different

// Integers for pulse counters
volatile int counter_A = 0;


// Interrupt Service Routines

// Motor A pulse count ISR
void ISR_countA()  
{
  counter_A++;  // increment Motor A counter value
} 

// Function to convert from centimeters to steps
int CMtoSteps(float cm) {

  int result;  // Final calculation result
  float circumference = (wheeldiameter * 3.14); // Calculate wheel circumference in cm
  float cm_step = circumference / stepcount;  // CM per Step
  
  float f_result = cm / cm_step;  // Calculate result as a float
  result = (int) f_result; // Convert to an integer (note this is NOT rounded)
  
  return result;  // End and return result

}
void Stop()
{
 
  digitalWrite(motorA1,LOW);
  digitalWrite(motorA2,LOW);
  digitalWrite(motorB1,LOW);
  digitalWrite(motorB2,LOW);
  digitalWrite(motorC1,LOW);
  digitalWrite(motorC2,LOW);
  digitalWrite(motorD1,LOW);
  digitalWrite(motorD2,LOW); 
}
void forward()
 {
 digitalWrite(motorA1,HIGH);
  digitalWrite(motorA2,LOW);
  digitalWrite(motorB1,HIGH);
  digitalWrite(motorB2,LOW);
  digitalWrite(motorC1,HIGH);
  digitalWrite(motorC2,LOW);
  digitalWrite(motorD1,HIGH);
  digitalWrite(motorD2,LOW);
  }
  void backward()
{
  digitalWrite(motorA1,LOW);
  digitalWrite(motorA2,HIGH);
  digitalWrite(motorB1,LOW);
  digitalWrite(motorB2,HIGH);
  digitalWrite(motorC1,LOW);
  digitalWrite(motorC2,HIGH);
  digitalWrite(motorD1,LOW);
  digitalWrite(motorD2,HIGH);
}

// Function to Move Forward
void MoveForward(int steps, int mspeed) 
{
   counter_A = 0;  //  reset counter A to zero
  
   
  forward();
   
   // Go forward until step value is reached
   while (steps > counter_A) { 
   forward;
   }
    
  // Stop when done
  Stop ();
  counter_A = 0;  //  reset counter A to zero
 
}

// Function to Move in Reverse
void MoveReverse(int steps, int mspeed) 
{
   counter_A = 0;  //  reset counter A to zero
  backward;
   
   // Go in reverse until step value is reached
   while (steps > counter_A ) {
   
   backward();
    }
    
  // Stop when done
 Stop ();
  counter_A = 0;  //  reset counter A to zero
  
}



void setup() 
{
  pinMode(motorA1,OUTPUT);
 pinMode(motorA2,OUTPUT);
 pinMode(motorB1,OUTPUT);
 pinMode(motorB2,OUTPUT);
 pinMode(motorC1,OUTPUT);
 pinMode(motorC2,OUTPUT);
 pinMode(motorD1,OUTPUT);
 pinMode(motorD2,OUTPUT);
 
  // Attach the Interrupts to their ISR's
  attachInterrupt(digitalPinToInterrupt (MOTOR_A), ISR_countA, RISING);  // Increase counter A when speed sensor pin goes High
 
  
  // Test Motor Movement  - Experiment with your own sequences here  
  
  MoveForward(CMtoSteps(100), 150);  // Forward half a metre at 255 speed
  delay(1000);  // Wait one second
  MoveReverse(50, 150);  // Reverse 10 steps at 255 speed
  delay(1000);  // Wait one second
  MoveForward(50, 150);  // Forward 10 steps at 150 speed
  delay(1000);  // Wait one second
  MoveReverse(CMtoSteps(100), 150);  // Reverse 25.4 cm at 200 speed
  delay(1000);  // Wait one second

  
  
} 


void loop()
{
  // Put whatever you want here!

  
}
